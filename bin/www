#!/usr/bin/env node
'use strict';
/**
 * Module dependencies.
 */

/* this is used to read our key and cert files, code from node js to pull just the values we need from the file*/
const { readFileSync } = require('fs')

const { app, io } = require('../app');
const debug = require('debug')('project-two:server');
const https = require('https');

/**
 * Environment Variables (We added this). Structures assignment
 */

const { LOCALHOST_SSL_KEY, LOCALHOST_SSL_CERT } = process.env;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTPS server.
 * https://letsencrypt.org/docs/certificates-for-localhost/ for key and certs generation + add days.
 */

const config = {
  key: readFileSync(LOCALHOST_SSL_KEY),
  cert: readFileSync(LOCALHOST_SSL_CERT),
};

const server = https.createServer(config, app);

/**
 * Listen on provided port, on all network interfaces.
 */

io.attach(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
